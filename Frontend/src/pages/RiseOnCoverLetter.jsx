import React, { useState, useEffect } from "react";
import { ChevronDown, HelpCircle, Gem, Download } from "lucide-react";
import { Link, useNavigate } from "react-router-dom"; // âœ… added for Sidebar links
import bgImage from "../assets/background.jpg"; 
const RiseOnCoverLetter = () => {
  const navigate = useNavigate();
  const [senderName, setSenderName] = useState("");
  const [senderEmail, setSenderEmail] = useState("");
  const [profile, setProfile] = useState("");
  const [targetRole, setTargetRole] = useState("");
  const [company, setCompany] = useState("");
  const [jobDescription, setJobDescription] = useState("");
  const [touched, setTouched] = useState({});
  const [coverLetter, setCoverLetter] = useState("");

  const isInvalid = (field) => !field && touched[field];

  useEffect(() => {
    if (
      senderName &&
      senderEmail &&
      profile &&
      targetRole &&
      company &&
      !jobDescription
    ) {
      const autoGenerated = `We are seeking a highly skilled ${targetRole} to join our team at ${company}. The ideal candidate should have strong expertise in ${profile}, excellent problem-solving skills, and the ability to contribute to high-impact projects. If you are passionate about innovation and want to work in a dynamic environment, ${company} is the place for you.`;
      setJobDescription(autoGenerated);
    }
  }, [senderName, senderEmail, profile, targetRole, company, jobDescription]);

  const handleSubmit = () => {
    setTouched({
      senderName: true,
      senderEmail: true,
      profile: true,
      targetRole: true,
      company: true,
    });

    if (senderName && senderEmail && profile && targetRole && company) {
      const letter = `
Dear Hiring Manager,

I am writing to express my keen interest in the ${targetRole} position at ${company}. With a solid background in ${profile}, I am confident in my ability to contribute effectively to your team.

${jobDescription}

Thank you for considering my application. I look forward to the opportunity to discuss how I can add value to ${company}'s mission and goals.

Sincerely,
${senderName}
${senderEmail}
      `.trim();
      setCoverLetter(letter);
    }
  };

  const handleDownloadPDF = async () => {
    try {
      const { jsPDF } = await import("jspdf");
      const doc = new jsPDF();
      const lines = doc.splitTextToSize(coverLetter, 180);
      doc.setFont("times", "normal");
      doc.setFontSize(12);
      doc.text(lines, 15, 20);
      doc.save("cover_letter.pdf");
    } catch (err) {
      console.error("Failed to load jsPDF dynamically:", err);
    }
  };

  return (
    <div
      className="flex min-h-screen font-sans text-gray-800"
      style={{
              backgroundImage: `url(${bgImage})`,
        backgroundSize: "cover",
        backgroundPosition: "center",
        backgroundRepeat: "no-repeat",
      }}>
      {/* Sidebar (same as Dashboard) */}
      <aside className="w-64 min-h-screen bg-gradient-to-b from-blue-500 to-indigo-700 shadow-xl text-white p-6 border-r border-indigo-800">
        <h2 className="text-3xl font-bold mb-10">Dashboard</h2>
        <nav className="space-y-6 text-lg font-semibold">
          <Link
            to="/myaccount"
            className="block text-white/80 hover:text-yellow-300 hover:underline transition-all"
          >
            Profile
          </Link>
          <Link
            to="/dashboard"
            className="block text-white/80 hover:text-yellow-300 hover:underline transition-all"
          >
            Resume
          </Link>
          <Link
            to="/riseon-coverletter"
            className="block text-yellow-300 font-bold underline"
          >
            Forwarding Letter
          </Link>
          <Link
            to="/riseon-interview"
            className="block text-white/80 hover:text-yellow-300 hover:underline transition-all"
          >
            Interview
          </Link>
          <Link
            to="/riseon-interview"
            className="block text-white/80 hover:text-yellow-300 hover:underline transition-all"
          >
            Job Portals
          </Link>
          <Link
            to="/riseon-quiz"
            className="block text-white/80 hover:text-yellow-300 hover:underline transition-all"
          >
            Quiz
          </Link>
          <span className="block text-white/50">Counsellor (Coming Soon)</span>
        </nav>
      </aside>

      {/* Main Content */}
      <main className="flex-1 p-6 sm:p-10 bg-transparent">
        <div className="max-w-6xl w-full bg-white shadow-2xl rounded-2xl p-6 sm:p-10 border border-gray-200">
          {/* Header */}
          <div className="mb-8 border-b-2 border-gray-100 pb-4">
            <h1 className="text-4xl font-extrabold flex items-center gap-2 text-slate-800">
              <span className="text-transparent bg-clip-text bg-gradient-to-r from-orange-500 to-yellow-500">
                Cover Letter
              </span>{" "}
              Generator
              {/* <HelpCircle size={24} className="text-blue-500" /> */}
            </h1>
            <p className="mt-2 text-md text-gray-500">
              Generate a professional cover letter in seconds.
            </p>
          </div>

          <div className="flex flex-col lg:flex-row gap-8">
            {/* Left: Form */}
            <div className="w-full lg:w-1/2 space-y-6">
              <InputField
                label="Your Full Name"
                required
                value={senderName}
                setValue={setSenderName}
                touched={touched}
                setTouched={setTouched}
                fieldName="senderName"
                placeholder="e.g. John Doe"
              />

              <InputField
                label="Your Email"
                required
                value={senderEmail}
                setValue={setSenderEmail}
                touched={touched}
                setTouched={setTouched}
                fieldName="senderEmail"
                placeholder="e.g. john@example.com"
              />

              <InputField
                label="Target Job Role"
                required
                value={targetRole}
                setValue={setTargetRole}
                touched={touched}
                setTouched={setTouched}
                fieldName="targetRole"
                placeholder="e.g. Frontend Developer"
              />

              <InputField
                label="Company"
                required
                value={company}
                setValue={setCompany}
                touched={touched}
                setTouched={setTouched}
                fieldName="company"
                placeholder="e.g. Google"
              />

              {/* Select Profile */}
              <div>
                <label className="block text-sm font-medium mb-1 text-slate-700">
                  Select Profile <span className="text-red-600">*</span>
                </label>
                <select
                  value={profile}
                  onChange={(e) => setProfile(e.target.value)}
                  onBlur={() =>
                    setTouched((prev) => ({ ...prev, profile: true }))
                  }
                  className={`w-full border rounded-lg px-3 py-2 text-sm bg-white transition-colors focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${
                    isInvalid("profile") ? "border-red-500" : "border-gray-300"
                  }`}
                >
                  <option value="">-- Select --</option>
                  <optgroup label="Software Engineering">
                    <option>Junior Software Engineer</option>
                    <option>Senior Software Engineer</option>
                    <option>Full Stack Developer</option>
                    <option>MERN Stack Developer</option>
                    <option>Frontend Developer</option>
                    <option>Backend Developer</option>
                  </optgroup>
                  <optgroup label="Data & Analytics">
                    <option>Data Analyst</option>
                    <option>Data Scientist</option>
                    <option>Machine Learning Engineer</option>
                    <option>Business Intelligence (BI) Analyst</option>
                  </optgroup>
                  <optgroup label="Cloud & DevOps">
                    <option>DevOps Engineer</option>
                    <option>Cloud Architect</option>
                    <option>Site Reliability Engineer (SRE)</option>
                  </optgroup>
                  <optgroup label="Cybersecurity">
                    <option>Cybersecurity Analyst</option>
                    <option>Penetration Tester</option>
                    <option>Security Engineer</option>
                  </optgroup>
                  <optgroup label="Management & Leadership">
                    <option>Product Manager</option>
                    <option>IT Manager</option>
                    <option>IT Director</option>
                    <option>VP of Engineering</option>
                    <option>Chief Information Officer (CIO)</option>
                    <option>Chief Technology Officer (CTO)</option>
                    <option>Chief Information Security Officer (CISO)</option>
                  </optgroup>
                  <optgroup label="Design">
                    <option>UI/UX Designer</option>
                    <option>Graphic Designer</option>
                  </optgroup>
                </select>
                {isInvalid("profile") && (
                  <p className="text-red-500 text-xs mt-1">
                    Please select a profile.
                  </p>
                )}
              </div>

              {/* Job Description */}
              <div>
                <label className="block text-sm font-medium mb-1 text-slate-700">
                  Job Description
                </label>
                <textarea
                  value={jobDescription}
                  onChange={(e) => setJobDescription(e.target.value)}
                  rows={4}
                  className="w-full border border-gray-300 rounded-lg px-3 py-2 text-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors"
                  placeholder="Paste the job description here..."
                />
                <p className="text-xs text-gray-500 mt-1 italic">
                  Auto-filled after all fields are completed. You can edit it
                  manually.
                </p>
              </div>

              {/* Submit */}
              <div className="pt-2">
                <button
                  onClick={handleSubmit}
                  className="flex items-center justify-center w-full sm:w-auto gap-2 px-6 py-2.5 bg-gradient-to-r from-orange-500 to-yellow-500 text-white rounded-full shadow-lg font-bold hover:opacity-90 transition-opacity transform hover:scale-105"
                >
                  {/* <Gem size={18} /> */}
                  <span>Generate Cover Letter</span>
                </button>
              </div>
            </div>

            {/* Right: Preview */}
            <div className="w-full lg:w-1/2 mt-8 lg:mt-0 relative">
              <h2 className="text-2xl font-bold text-slate-800 mb-4 flex items-center gap-2">
                <ChevronDown
                  size={20}
                  className="text-orange-500 lg:hidden"
                />
                Preview Cover Letter:
              </h2>
              {coverLetter ? (
                <div className="relative">
                  <pre className="whitespace-pre-wrap text-sm sm:text-base font-serif bg-gray-50 p-6 rounded-xl border border-gray-200 text-slate-700 min-h-[300px] overflow-auto">
                    {coverLetter}
                  </pre>
                  <div className="absolute top-2 right-2">
                    <button
                      onClick={handleDownloadPDF}
                      className="flex items-center gap-2 px-4 py-2 bg-blue-600 text-white text-sm rounded-full shadow-lg hover:bg-blue-700 transition-colors"
                    >
                      <Download size={20} />
                      Download PDF
                    </button>
                  </div>
                </div>
              ) : (
                <div className="text-center p-10 bg-gray-50 rounded-xl border border-gray-200 text-gray-500 min-h-[300px] flex items-center justify-center">
                  <p>Fill out the form to generate your cover letter.</p>
                </div>
              )}
            </div>
          </div>
        </div>
      </main>
    </div>
  );
};

// Reusable Input Field
const InputField = ({
  label,
  value,
  setValue,
  touched,
  setTouched,
  fieldName,
  placeholder,
  required = false,
}) => {
  const isInvalid = !value && touched[fieldName];
  return (
    <div>
      <label className="block text-sm font-medium mb-1 text-slate-700">
        {label} {required && <span className="text-red-600">*</span>}
      </label>
      <input
        value={value}
        onChange={(e) => setValue(e.target.value)}
        onBlur={() => setTouched((prev) => ({ ...prev, [fieldName]: true }))}
        className={`w-full border rounded-lg px-3 py-2 text-sm transition-colors focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${
          isInvalid ? "border-red-500" : "border-gray-300"
        }`}
        placeholder={placeholder}
      />
      {isInvalid && (
        <p className="text-red-500 text-xs mt-1">
          Please enter {label.toLowerCase()}.
        </p>
      )}
    </div>
  );
};

export default RiseOnCoverLetter;
